import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    CallbackContext,
    ChatJoinRequestHandler,
    ChatMemberHandler
)
from telegram.constants import ChatMemberStatus
from datetime import datetime

API_TOKEN = '8000554853:AAG7vmCauc8XcvpPA7VciU6Z0TYixtfqn80'
MAIN_CHANNEL_ID = -1002366098084  # –ö–∞–Ω–∞–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
NOTIFICATION_CHANNEL_ID = -1002679234430  # –ù–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
PRIVATE_CHANNEL_ID = -1002594928531
ADMIN_ID = 7567695472
CHANNEL_LINK = 'https://t.me/+NUq2EXMs_to5MzYy'
WELCOME_IMAGE = 'welcome.png'
SUBSCRIBERS = set()
USER_DB = set()  # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

async def error_handler(update: object, context: CallbackContext) -> None:
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    if update and isinstance(update, Update):
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as e:
            logger.error(f"Error sending error message: {e}")

async def notify_admin(action: str, user: dict, context: CallbackContext, feedback: str = None):
    try:
        text = (f"üö® <b>–°–û–ë–´–¢–ò–ï:</b> {action}\n"
                f"‚ñ´Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user['mention']}\n"
                f"‚ñ´Ô∏è <b>ID:</b> <code>{user['id']}</code>\n"
                f"‚ñ´Ô∏è <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        
        if feedback:
            text += f"\n\nüìù <b>–û—Ç–∑—ã–≤:</b>\n{feedback}"
        
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=text,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Admin notification error: {e}")

async def start(update: Update, context: CallbackContext) -> None:
    try:
        context.user_data.clear()
        user = update.effective_user
        USER_DB.add(user.id)
        
        keyboard = [[InlineKeyboardButton("üß† –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø", callback_data='start_bot')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = await update.message.reply_photo(
            photo=open(WELCOME_IMAGE, 'rb'),
            caption=f"<b>üß† –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, {user.first_name}.</b>\n\n"
                    "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.\n\n"
                    "‚ñ´Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:\n"
                    "1. <b>–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b> ‚Äî –ø—Å–∏—Ö–æ—Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∞–Ω—Ç–∏–º–∞–Ω–∏–ø—É–ª—è—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n"
                    "2. <b>–ó–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª</b> ‚Äî –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –Ω–∞—É—á–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        await save_message(update, context, message.message_id)
        logger.info(f"User {user.id} started the bot")
    except Exception as e:
        logger.error(f"Error in start: {e}")

async def save_message(update: Update, context: CallbackContext, message_id: int) -> None:
    try:
        if 'message_ids' not in context.user_data:
            context.user_data['message_ids'] = []
        context.user_data['message_ids'].append(message_id)
    except Exception as e:
        logger.error(f"Error saving message: {e}")

async def delete_previous_messages(update: Update, context: CallbackContext) -> None:
    try:
        for msg_id in context.user_data.get('message_ids', []):
            try:
                await context.bot.delete_message(update.effective_chat.id, msg_id)
            except Exception as e:
                logger.warning(f"Error deleting message: {e}")
        context.user_data['message_ids'] = []
    except Exception as e:
        logger.error(f"Error deleting messages: {e}")

async def main_menu(update: Update, context: CallbackContext) -> None:
    try:
        query = update.callback_query
        await query.answer()
        await delete_previous_messages(update, context)
        
        keyboard = [
            [InlineKeyboardButton("üì© –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='subscribe')],
            [InlineKeyboardButton("üîë –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=open(WELCOME_IMAGE, 'rb'),
            caption="<b>üîê –ü–†–ò–ö–õ–ê–î–ù–ê–Ø –ü–°–ò–•–û–õ–û–ì–ò–Ø –ë–ï–ó –¶–ï–ù–ó–£–†–´</b>\n\n"
                    "1Ô∏è‚É£ <b>–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞:</b>\n"
                    "‚Äî –ê–Ω—Ç–∏–º–∞–Ω–∏–ø—É–ª—è—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n"
                    "‚Äî –ù–µ–π—Ä–æ—Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ª–∞–π—Ñ—Ö–∞–∫–∏\n"
                    "‚Äî –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –∫–µ–π—Å—ã\n\n"
                    "2Ô∏è‚É£ <b>–ó–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:</b>\n"
                    "‚Äî 1-2 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ\n"
                    "‚Äî –°—Å—ã–ª–∫–∏ –Ω–∞ –ø–µ—Ä—Å–æ–∏—Å—Ç–æ—á–Ω–∏–∫–∏ (PubMed/Springer –∏ –¥—Ä.)\n"
                    "‚Äî –ë–∏–æ—Ö–∏–º–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è\n\n"
                    "‚è∫ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        await save_message(update, context, message.message_id)
    except Exception as e:
        logger.error(f"Error in main_menu: {e}")

async def handle_chat_join_request(update: Update, context: CallbackContext) -> None:
    try:
        user = update.chat_join_request.from_user
        logger.info(f"Join request from user {user.id}")
        await context.bot.send_message(
            chat_id=user.id,
            text="<b>üõ° –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò</b>\n\n"
                 "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É:\n"
                 "1. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç\n"
                 "2. –ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é\n\n"
                 "‚ñ´Ô∏è <i>–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç:\n"
                 "‚Äî –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∫–ª–∏–∫–æ–≤\n"
                 "‚Äî –í—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏\n"
                 "‚Äî –ò—Å—Ç–æ—Ä–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞</i>",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚úÖ –Ø –Ω–µ —Ä–æ–±–æ—Ç", callback_data='verify_human')
            ]]),
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Can't send message to {user.id}: {e}")

async def verify_human(update: Update, context: CallbackContext) -> None:
    try:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        logger.info(f"Verification started for user {user_id}")

        await context.bot.approve_chat_join_request(
            chat_id=PRIVATE_CHANNEL_ID,
            user_id=user_id
        )
        
        await notify_admin(
            action="–û–î–û–ë–†–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò –í –ö–ê–ù–ê–õ",
            user={'id': user_id, 'mention': query.from_user.mention_html()},
            context=context
        )
        
        await context.bot.send_message(
            chat_id=user_id,
            text="<b>üü¢ –î–û–°–¢–£–ü –û–¢–ö–†–´–¢</b>\n\n"
                 "<b>–¢–µ–ø–µ—Ä—å –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã:</b>\n"
                 "‚Äî 1-2 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ\n"
                 "‚Äî –°—Å—ã–ª–∫–∏ –Ω–∞ –ø–µ—Ä—Å–æ–∏—Å—Ç–æ—á–Ω–∏–∫–∏ (PubMed/Springer –∏ –¥—Ä.)\n"
                 "‚Äî –ë–∏–æ—Ö–∏–º–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è\n\n"
                 "<i>¬´–ó–Ω–∞–Ω–∏–µ ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ ‚Äî –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ.¬ª</i> üß†‚öôÔ∏è",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
            ]]),
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Verification error: {e}")
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def handle_subscription(update: Update, context: CallbackContext) -> None:
    try:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        SUBSCRIBERS.add(user_id)
        USER_DB.add(user_id)
        
        await notify_admin(
            action="–ü–û–î–ü–ò–°–ö–ê –ù–ê –†–ê–°–°–´–õ–ö–£",
            user={'id': user_id, 'mention': query.from_user.mention_html()},
            context=context
        )
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="<b>‚úÖ –ü–û–î–ü–ò–°–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê</b>\n\n"
                 "‚ñ´Ô∏è –í —Ä–∞—Å—Å—ã–ª–∫—É –≤—Ö–æ–¥–∏—Ç:\n"
                 "‚Äî –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ üß©\n"
                 "‚Äî –†–∞–∑–±–æ—Ä –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –∫–µ–π—Å–æ–≤\n"
                 "‚Äî –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n\n"
                 "<i>–û—Ç–ø–∏—Å–∞—Ç—å—Å—è: /stop</i>",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu'),
                InlineKeyboardButton("üîë –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", url=CHANNEL_LINK)
            ]]),
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Subscription error: {e}")

async def forward_from_main_channel(update: Update, context: CallbackContext) -> None:
    try:
        if update.channel_post and update.channel_post.chat.id == MAIN_CHANNEL_ID:
            for user_id in SUBSCRIBERS.copy():
                try:
                    await context.bot.copy_message(
                        chat_id=user_id,
                        from_chat_id=MAIN_CHANNEL_ID,
                        message_id=update.channel_post.message_id
                    )
                except Exception as e:
                    logger.error(f"Forward error to {user_id}: {e}")
                    SUBSCRIBERS.discard(user_id)
    except Exception as e:
        logger.error(f"Error in forward_from_main_channel: {e}")

async def handle_notification_channel_post(update: Update, context: CallbackContext) -> None:
    try:
        if update.channel_post and update.channel_post.chat.id == NOTIFICATION_CHANNEL_ID:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
                [InlineKeyboardButton("üîë –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", url=CHANNEL_LINK)]
            ])
            
            for user_id in USER_DB:
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="üöÄ <b>–ù–û–í–´–ô –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ò–ù–°–¢–†–£–ú–ï–ù–¢!</b>\n\n"
                             "üß† –¢–æ–ª—å–∫–æ —á—Ç–æ –≤ –∫–∞–Ω–∞–ª–µ .mindset application:\n"
                             "‚ñ´Ô∏è –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ª–∞–π—Ñ—Ö–∞–∫\n"
                             "‚ñ´Ô∏è –ù–∞—É—á–Ω–æ –¥–æ–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏\n"
                             "‚ñ´Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–µ–π—Å –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏\n\n"
                             "üî• –ù–µ —É–ø—É—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–∫–∞—á–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏!",
                        reply_markup=keyboard,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.error(f"Error sending to {user_id}: {e}")
    except Exception as e:
        logger.error(f"Error in handle_notification_channel_post: {e}")

async def stop(update: Update, context: CallbackContext) -> None:
    try:
        user_id = update.effective_user.id
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data='confirm_unsub')],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data='cancel_unsub')]
        ])
        
        await context.bot.send_message(
            chat_id=user_id,
            text="<b>‚ö†Ô∏è –í–´ –£–í–ï–†–ï–ù–´?</b>\n\n"
                 "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏?",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Stop command error: {e}")

async def handle_unsub_confirmation(update: Update, context: CallbackContext) -> None:
    try:
        query = update.callback_query
        await query.answer()
        user = query.from_user
        user_id = user.id
        
        if query.data == 'confirm_unsub':
            SUBSCRIBERS.discard(user_id)
            await context.bot.send_message(
                chat_id=user_id,
                text="<b>üî¥ –í–´ –û–¢–ü–ò–°–ê–ù–´</b>\n\n"
                     "–†–∞—Å—Å—ã–ª–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å.\n"
                     "–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
                reply_markup=InlineKeyboardMarkup(
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
                    [InlineKeyboardButton("üîë –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", url=CHANNEL_LINK)]
                ),
                parse_mode='HTML'
            )
            await notify_admin(
                action="–û–¢–ü–ò–°–ö–ê –û–¢ –†–ê–°–°–´–õ–ö–ò",
                user={'id': user_id, 'mention': user.mention_html()},
                context=context
            )
        else:
            await context.bot.send_message(
                chat_id=user_id,
                text="<b>–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ üü¢</b>",
                reply_markup=InlineKeyboardMarkup(
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
                    [InlineKeyboardButton("üîë –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", url=CHANNEL_LINK)]
                ),
                parse_mode='HTML'
            )
            
        await delete_previous_messages(update, context)
    except Exception as e:
        logger.error(f"Unsubscription error: {e}")

async def handle_chat_member_update(update: Update, context: CallbackContext) -> None:
    try:
        if update.chat_member.new_chat_member.status == ChatMemberStatus.LEFT:
            user = update.chat_member.from_user
            if update.chat_member.chat.id == PRIVATE_CHANNEL_ID:
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîë –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞", url=CHANNEL_LINK)
                ]])
                
                await context.bot.send_message(
                    chat_id=user.id,
                    text=f"<b>üåÄ –¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–∫–∏–Ω—É—Ç—å –∫–∞–Ω–∞–ª .mindset application?</b>\n\n"
                         "–≠—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —Å—Ç–∏—Ä–∞–µ—Ç —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å. –ï—â–µ –Ω–µ –ø–æ–∑–¥–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è.\n\n"
                         "‚ñ´Ô∏è –ï—Å–ª–∏ —Ç–µ–±—è –Ω–µ —É—Å—Ç—Ä–æ–∏–ª –∫–æ–Ω—Ç–µ–Ω—Ç:\n"
                         "‚Äî –í—ã—Å–∫–∞–∂–∏ <a href='t.me/warpscythe'>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</a>\n"
                         "‚Äî –ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –Ω–∏–∂–µ ‚§µÔ∏è\n\n"
                         "<i>–£ —Ç–µ–±—è –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</i> ‚è≥",
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                
                await notify_admin(
                    action="–í–´–•–û–î –ò–ó –ö–ê–ù–ê–õ–ê",
                    user={'id': user.id, 'mention': user.mention_html()},
                    context=context
                )
                
                context.user_data['feedback_allowed'] = True
    except Exception as e:
        logger.error(f"Chat member update error: {e}")

async def handle_feedback(update: Update, context: CallbackContext) -> None:
    try:
        user = update.effective_user
        if context.user_data.get('feedback_allowed', False):
            feedback_text = update.message.text
            await notify_admin(
                action="–û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨",
                user={'id': user.id, 'mention': user.mention_html()},
                context=context,
                feedback=feedback_text
            )
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu'),
                 InlineKeyboardButton("üîë –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ", url=CHANNEL_LINK)]
            ])
            await context.bot.send_message(
                chat_id=user.id,
                text="<b>üì¨ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</b>\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            context.user_data['feedback_allowed'] = False
        else:
            await update.message.delete()
    except Exception as e:
        logger.error(f"Feedback error: {e}")

def main():
    application = Application.builder().token(API_TOKEN).build()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('stop', stop))
    application.add_handler(CallbackQueryHandler(main_menu, pattern='^start_bot$'))
    application.add_handler(CallbackQueryHandler(main_menu, pattern='^main_menu$'))
    application.add_handler(CallbackQueryHandler(handle_subscription, pattern='^subscribe$'))
    application.add_handler(CallbackQueryHandler(verify_human, pattern='^verify_human$'))
    application.add_handler(CallbackQueryHandler(handle_unsub_confirmation, pattern='^(confirm_unsub|cancel_unsub)$'))
    application.add_handler(ChatJoinRequestHandler(handle_chat_join_request))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
    application.add_handler(MessageHandler(
        filters.Chat(MAIN_CHANNEL_ID) & filters.ChatType.CHANNEL,
        forward_from_main_channel
    ))
    application.add_handler(MessageHandler(
        filters.Chat(NOTIFICATION_CHANNEL_ID) & filters.ChatType.CHANNEL,
        handle_notification_channel_post
    ))
    
    application.add_handler(ChatMemberHandler(handle_chat_member_update, ChatMemberHandler.CHAT_MEMBER))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_feedback))
    
    application.add_error_handler(error_handler)

    application.run_polling()

if __name__ == '__main__':
    main()